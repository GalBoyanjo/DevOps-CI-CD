pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: ‘20', daysToKeepStr: ‘10'))
    }

    stages {
        stage('checkout') {
            steps {
                script {
                    properties([pipelineTriggers([pollSCM('0,30 * * * *')])])
                }
                git 'https://github.com/GalBoyanjo/DevOpsExperts.git'
            }
        }
        stage('Run rest_app') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start /min python project/rest_app.py'
                    } else {
                        sh 'nohup python project/rest_app.py &'
                    }
                }
            }
        }
        stage('Run web_app') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start /min python project/web_app.py'
                    } else {
                        sh 'nohup python project/web_app.py &'
                    }
                }
            }
        }
        stage('Run backend_testing') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start /min python project/backend_testing.py'
                    } else {
                        sh 'nohup python project/backend_testing.py &'
                    }
                }
            }
        }
        stage('Run frontend_testing') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start /min python project/frontend_testing.py'
                    } else {
                        sh 'nohup python project/frontend_testing.py &'
                    }
                }
            }
        }
        stage('Run combined_testing') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start /min python project/combined_testing.py'
                    } else {
                        sh 'nohup python project/combined_testing.py &'
                    }
                }
            }
        }
        stage('Run clean_environment') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start /min python project/clean_environment.py'
                    } else {
                        sh 'nohup python project/clean_environment.py &'
                    }
                }
            }
        }
    }
}

def checkOs(){
    if (isUnix()) {
        def uname = sh script: 'uname', returnStdout: true
        if (uname.startsWith("Darwin")) {
            return "Macos"
        }
        else {
            return "Linux"
        }
    }
    else {
        return "Windows"
    }
}