pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '5'))
    }
    environment {
        SERVICE_CREDS = credentials('LocalMySQL') //DB connection credentials
        serviceHost = '127.0.0.1'
        serviceDockerHost = 'db'
        registry = "galbo22/my-proj"  // The name of your user and repository (which can be created manually)
        registryCredential = 'docker_hub' // The credentials used to your repo
        dockerImage = '' // will be overridden later
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    properties([pipelineTriggers([pollSCM('*/30 * * * *')])])
                }
                git 'https://github.com/GalBoyanjo/DevOpsExperts.git'
            }
        }
        stage('Run Docker Compose - DB'){
            steps{
                script {
                    if (checkOs() == 'Windows') {
                        bat 'docker-compose -f project/docker-compose-db.yml up -d'
                    } else {
                        sh 'docker-compose -f project/docker-compose-db.yml up -d'
                    }
                }
            }
        }
        stage('Run rest_app') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start /min python project/rest_app.py %SERVICE_CREDS_USR% %SERVICE_CREDS_PSW% %serviceHost%'
                    } else {
                        sh 'nohup python project/rest_app.py & %SERVICE_CREDS_USR% %SERVICE_CREDS_PSW% %serviceHost%'
                    }
                }
            }
        }
        stage('Run backend_testing') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'python project/backend_testing.py %SERVICE_CREDS_USR% %SERVICE_CREDS_PSW% %serviceHost%'
                    } else {
                        sh 'python project/backend_testing.py %SERVICE_CREDS_USR% %SERVICE_CREDS_PSW% %serviceHost%'
                    }
                }
            }
        }
        stage('Run clean_environment') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'python project/clean_environment.py'
                    } else {
                        sh 'python project/clean_environment.py'
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build(registry + ":$BUILD_NUMBER", "-f ./project/Dockerfile --build-arg DB_USR=%SERVICE_CREDS_USR% --build-arg DB_PASS=%SERVICE_CREDS_PSW% --build-arg DB_HOST=%serviceDockerHost% .") // give a name and version to image
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push() // push image to hub
                    }
                }
            }
        }
        stage('Set Compose Image Version'){
            steps{
                script {
                    if (checkOs() == 'Windows') {
                        bat 'echo IMAGE_TAG=${BUILD_NUMBER} > project/.env'
                    } else {
                        sh 'echo IMAGE_TAG=${BUILD_NUMBER} > project/.env'
                    }
                }
            }
        }
        stage('Run Docker Compose'){
            steps{
                script {
                    if (checkOs() == 'Windows') {
                        bat 'docker-compose -f project/docker-compose.yml up -d'
                    } else {
                        sh 'docker-compose -f project/docker-compose.yml up -d'
                    }
                }
            }
        }
        stage('Run dockerized backend_testing') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'python project/docker_backend_testing.py %SERVICE_CREDS_USR% %SERVICE_CREDS_PSW% %serviceHost%'
                    } else {
                        sh 'python project/docker_backend_testing.py %SERVICE_CREDS_USR% %SERVICE_CREDS_PSW% %serviceHost%'
                    }
                }
            }
        }
    }
    post{
        always {
            bat 'docker rmi $registry:$BUILD_NUMBER' // delete the local image at the end
            bat 'docker-compose -f project/docker-compose.yml down' // delete the local image at the end
        }
        failure {
            emailext to: "gal.boyanjo@qmarkets.net",
            subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
            body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}",
            attachLog: true
        }
    }
}

def checkOs(){
    if (isUnix()) {
        def uname = sh script: 'uname', returnStdout: true
        if (uname.startsWith("Darwin")) {
            return "Macos"
        }
        else {
            return "Linux"
        }
    }
    else {
        return "Windows"
    }
}